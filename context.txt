Phone Monitoring Dashboard - 4-Day Development Plan
🏗️ ARCHITECTURE OVERVIEW
Tech Stack

Backend: FastAPI + PostgreSQL (Render database)
Frontend: React + HTML5 Audio + Leaflet.js + Chart.js
Real-time: HTTP Polling (2-second intervals)
Deployment: Render.com

React Dashboard ←→ FastAPI Backend ←→ Render PostgreSQL
     ↑                   ↑                    ↑
   User Actions      API Endpoints       Phone Data
   (Start/Stop)      (/api/...)         (recordings, users)




phone-dashboard/
├── backend/
│   ├── main.py              # FastAPI app
│   ├── database.py          # DB connection & models
│   ├── crud.py              # Database operations
│   ├── schemas.py           # Pydantic models
│   └── requirements.txt     # Dependencies
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── Dashboard.js     # Main dashboard
│   │   │   ├── UserList.js      # User list with controls
│   │   │   ├── StatusBar.js     # Active sessions counter
│   │   │   ├── MapView.js       # Leaflet map
│   │   │   └── AudioPlayer.js   # Audio controls
│   │   ├── hooks/
│   │   │   └── usePolling.js    # Real-time data hook
│   │   ├── services/
│   │   │   └── api.js           # API calls
│   │   └── App.js
│   ├── package.json
│   └── public/
└── README.md


4-DAY SPRINT PLAN
DAY 1: Foundation & Backend
Goal: Working FastAPI backend with database connection
Morning (4 hours):

Setup FastAPI project

Install dependencies: fastapi, uvicorn, psycopg2-binary, sqlalchemy
Connect to Render PostgreSQL database
Create database models (users, sessions, recordings)


Core API endpoints:
pythonGET /api/dashboard-data     # All dashboard data
POST /api/start-listening/{user_id}
POST /api/stop-listening/{user_id}
GET /api/audio/{user_id}/latest


Afternoon (4 hours):

Database operations

CRUD functions for users, sessions
Query active sessions
Location data handling


Test backend

Test all endpoints with sample data
Ensure real-time data updates



End of Day 1: Working API that can start/stop sessions and return dashboard data
DAY 2: Frontend Foundation
Goal: React app with real-time polling and basic UI
Morning (4 hours):

Setup React project

npx create-react-app frontend
Install: leaflet, react-leaflet, chart.js, react-chartjs-2
Basic component structure


Real-time polling hook:
javascript// usePolling.js - Custom hook for data fetching
const usePolling = (url, interval = 2000) => {
  // Implementation
}


Afternoon (4 hours):

Core components

StatusBar (active sessions counter)
UserList (basic list with user status)
Connection status indicator


API integration

Connect frontend to backend
Test real-time updates



End of Day 2: React app showing live user data and active sessions
DAY 3: Controls & Functionality
Goal: Start/stop controls, search/filter, audio playback
Morning (4 hours):

User controls

Start/Stop listening buttons
Error handling and loading states
User feedback (success/error messages)


Search & filtering

Search by user ID
Filter by status (listening/idle/offline)
Real-time filtering



Afternoon (4 hours):

Audio integration

HTML5 audio player component
Play latest recording per user
Audio streaming from backend


Error handling

Connection status monitoring
Retry mechanisms
User-friendly error messages



End of Day 3: Fully functional dashboard with all controls working
DAY 4: Map, Polish & Deploy
Goal: Location map, responsive design, deployment
Morning (4 hours):

Leaflet map integration

Display user locations
Real-time location updates
Click on map markers for user info


Responsive design

Mobile-friendly layout
Proper breakpoints
Touch-friendly controls



Afternoon (4 hours):

Final polish

Loading animations
Better error messages
Code cleanup and optimization


Deployment

Deploy backend to Render
Deploy frontend to Render
Test production environment



End of Day 4: Live, working dashboard



PROJECT OVERVIEW
Goal: Create an admin dashboard for monitoring phone listening sessions in 4 days
Data Source: Render PostgreSQL database containing phone call recordings, user locations, timestamps
Timeline: 4-day sprint development
🎯 CORE FEATURES (Final List)

Live Active Sessions Counter - Real-time count of users currently being listened to
Current Listening Status Per User - Individual user status (listening/idle/offline)
User Status Display - Visual indicators for each user's current state
Search and Filtering - Search by user ID, filter by status
Start/Stop Listening Controls - Buttons to begin/end monitoring specific users
Map Showing Locations - Geographic visualization of user locations using Leaflet.js
Audio Playback Controls - Play latest recordings for each user
Error Handling & Connection Status - Connection indicators and error management

🏗️ TECHNICAL ARCHITECTURE
Tech Stack

Backend: FastAPI + PostgreSQL (Render database)
Frontend: React + HTML5 Audio + Leaflet.js + Chart.js
Real-time Updates: HTTP Polling (2-second intervals)
Deployment: Render.com (both frontend and backend)

Data Flow
Render PostgreSQL ←→ FastAPI Backend ←→ React Dashboard
    (Phone Data)        (API Endpoints)     (User Interface)
Database Schema (What exists in Render)

Users: user_id, location (lat/lng), current_status
Sessions: session_id, user_id, start_time, end_time, status, audio_file_path
Recordings: Audio files with timestamps and user associations

📁 PROJECT STRUCTURE
phone-dashboard/
├── backend/
│   ├── main.py              # FastAPI app
│   ├── database.py          # DB connection & models
│   ├── crud.py              # Database operations
│   ├── schemas.py           # Pydantic models
│   └── requirements.txt     # Dependencies
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── Dashboard.js     # Main dashboard
│   │   │   ├── UserList.js      # User list with controls
│   │   │   ├── StatusBar.js     # Active sessions counter
│   │   │   ├── MapView.js       # Leaflet map
│   │   │   └── AudioPlayer.js   # Audio controls
│   │   ├── hooks/
│   │   │   └── usePolling.js    # Real-time data hook
│   │   ├── services/
│   │   │   └── api.js           # API calls
│   │   └── App.js
│   └── package.json
└── README.md
🔌 API ENDPOINTS (Backend)
pythonGET /api/dashboard-data          # All dashboard data
POST /api/start-listening/{user_id}   # Start monitoring user
POST /api/stop-listening/{user_id}    # Stop monitoring user
GET /api/audio/{user_id}/latest       # Get latest audio recording
GET /api/users                        # Get all users with status
GET /api/sessions/active              # Get active sessions only
📊 DASHBOARD LAYOUT
┌─────────────────────────────────────────────┐
│ 🔴 Active Sessions: 23 | 🟢 Connected     │ ← Status Bar
├─────────────────────────────────────────────┤
│ [Search User] [Filter: All▼]    LEAFLET    │ ← Controls + Map
│                                   MAP       │
│ USER123 ● Listening [⏹Stop] [▶Audio]      │ ← User List
│ USER456 ○ Idle     [▶Start] [▶Audio]      │   with Controls
│ USER789 ○ Offline  [▶Start] [▶Audio]      │
└─────────────────────────────────────────────┘
🔄 REAL-TIME DATA STRUCTURE
javascript// API Response Format
{
  "active_sessions_count": 23,
  "connection_status": "connected",
  "users": [
    {
      "user_id": "user123",
      "status": "listening",        // listening/idle/offline
      "location": {"lat": 6.5244, "lng": 3.3792},
      "session_start": "2025-08-01T14:30:00Z",
      "current_session_id": "sess_456",
      "latest_audio": "/api/audio/user123/latest"
    }
  ],
  "last_updated": "2025-08-01T14:32:15Z"
}
🛠️ REQUIRED SOFTWARE VERSIONS

Python: 3.9 - 3.11 (NOT 3.12+)
Node.js: 18.x - 20.x LTS
FastAPI: 0.104.1
React: 18+ (via create-react-app)
Leaflet: 1.9.4
Chart.js: 4.4.0

📦 DEPENDENCIES
Backend (requirements.txt)
fastapi==0.104.1
uvicorn==0.24.0
psycopg2-binary==2.9.9
sqlalchemy==2.0.23
python-multipart==0.0.6
Frontend (package.json)
react (via create-react-app)
leaflet@1.9.4
react-leaflet@4.2.1
chart.js@4.4.0
react-chartjs-2@5.2.0
⏱️ 4-DAY DEVELOPMENT TIMELINE
Day 1: FastAPI backend + database connection + core API endpoints
Day 2: React frontend + real-time polling + basic user interface
Day 3: Start/stop controls + search/filter + audio playback
Day 4: Leaflet map + responsive design + deployment + polish
🎨 UI/UX SPECIFICATIONS
Color Coding

🔴 Red: Currently listening status
🟢 Green: Online/connected status
⚪ Gray: Idle/offline status
🔵 Blue: Interactive buttons and links

Responsive Design

Desktop-first design
Mobile-friendly breakpoints
Touch-friendly button sizes
Collapsible sidebar for mobile

Real-time Updates

2-second HTTP polling interval
Visual loading indicators
Connection status monitoring
Error state handling

🗄️ SESSION CONCEPT DEFINITION
Session = One continuous listening period for a specific user

Created when admin clicks "Start Listening"
Active while monitoring is ongoing
Completed when admin clicks "Stop Listening"
Each session produces one audio recording
Sessions track: user_id, start_time, end_time, audio_file, location

🚨 CRITICAL SUCCESS FACTORS

Real-time polling must work reliably (foundation of entire dashboard)
Start/Stop controls must update database immediately
Audio playback must stream from existing recordings
Map must show live user locations
Error handling for connection failures
Mobile responsive design
Deploy to production on Render

🔗 RENDER DATABASE CONNECTION

Use existing Render PostgreSQL database
Connection via environment variable: DATABASE_URL
Tables: users, sessions, recordings (assume they exist)
Real-time queries every 2 seconds

This summary contains all agreed specifications for code generation and development.