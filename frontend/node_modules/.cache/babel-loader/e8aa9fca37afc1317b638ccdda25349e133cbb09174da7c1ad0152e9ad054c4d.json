{"ast":null,"code":"// api.js - Updated for Flask server with /api routes\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://143.244.133.125:5000'; // Flask server on port 5000\n\nconst AUTH_HEADER = 'Basic ' + btoa('admin:supersecret');\nclass ApiService {\n  constructor(baseURL = API_BASE_URL) {\n    this.baseURL = baseURL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': AUTH_HEADER,\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} - ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n  async getDashboardData() {\n    try {\n      const flaskData = await this.request('/api/dashboard-data');\n      // Flask server returns data in the correct format already\n      return flaskData;\n    } catch (error) {\n      console.error('Dashboard data fetch failed:', error);\n      return this.getFallbackData();\n    }\n  }\n\n  // Keep this method for fallback scenarios\n  transformFlaskData(flaskData) {\n    // This method is no longer needed as Flask returns the correct format\n    // But keeping it for compatibility\n    return flaskData;\n  }\n  getFallbackData() {\n    return {\n      active_sessions_count: 0,\n      total_users: 0,\n      connection_status: \"disconnected\",\n      users: [],\n      active_sessions: [],\n      stats: {\n        total_users: 0,\n        active_sessions: 0,\n        total_recordings: 0,\n        online_users: 0\n      },\n      last_updated: new Date().toISOString()\n    };\n  }\n  async startListening(userId) {\n    return {\n      status: \"success\",\n      message: `Started monitoring device ${userId}`,\n      session_id: `mock_${userId}_${Date.now()}`,\n      user_id: userId,\n      location: {\n        lat: 6.5244,\n        lng: 3.3792,\n        source: \"mock\"\n      }\n    };\n  }\n  async stopListening(userId) {\n    return {\n      status: \"success\",\n      message: `Stopped monitoring device ${userId}`,\n      session_id: `mock_${userId}_${Date.now()}`,\n      duration_minutes: 0\n    };\n  }\n  async getLatestAudio(userId) {\n    try {\n      const flaskData = await this.request('/api/dashboard-data');\n      const deviceUploads = flaskData.filter(u => u.device_id === userId);\n      if (deviceUploads.length > 0) {\n        const latest = deviceUploads[0];\n        return {\n          user_id: userId,\n          audio_url: `${this.baseURL}/api/uploads/${latest.audio_file}`,\n          duration: 0,\n          recorded_at: latest.timestamp,\n          file_size: 0\n        };\n      } else {\n        throw new Error(\"No audio found\");\n      }\n    } catch (error) {\n      throw new Error(\"No audio found for this device\");\n    }\n  }\n  async getUsers() {\n    const dashboardData = await this.getDashboardData();\n    return {\n      users: dashboardData.users\n    };\n  }\n  async getActiveSessions() {\n    return {\n      active_sessions: []\n    };\n  }\n  async getDashboardStats() {\n    const dashboardData = await this.getDashboardData();\n    return dashboardData.stats;\n  }\n  async getRecentRecordings(limit = 10) {\n    try {\n      const flaskData = await this.request('/api/dashboard-data');\n      const recordings = flaskData.slice(0, limit).map((upload, index) => ({\n        id: `rec_${upload.device_id}_${index}`,\n        user_id: upload.device_id,\n        filename: upload.audio_file,\n        duration: 0,\n        created_at: upload.timestamp,\n        file_size: 0\n      }));\n      return {\n        recordings,\n        total: recordings.length,\n        limit\n      };\n    } catch (error) {\n      return {\n        recordings: [],\n        total: 0,\n        limit\n      };\n    }\n  }\n  async getHealth() {\n    try {\n      await this.request('/api/health');\n      return {\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        version: \"1.0.0\"\n      };\n    } catch (error) {\n      return {\n        status: \"unhealthy\",\n        timestamp: new Date().toISOString(),\n        error: error.message\n      };\n    }\n  }\n  async getHourlyActivity() {\n    const hours = [];\n    const activity = [];\n    const currentHour = new Date().getHours();\n    for (let i = 0; i < 24; i++) {\n      const hour = (currentHour - 23 + i) % 24;\n      hours.push(`${hour.toString().padStart(2, '0')}:00`);\n      activity.push(Math.floor(Math.random() * 10) + 1);\n    }\n    return {\n      labels: hours,\n      data: activity,\n      total_today: activity.reduce((a, b) => a + b, 0),\n      peak_hour: hours[activity.indexOf(Math.max(...activity))],\n      last_updated: new Date().toISOString()\n    };\n  }\n  async uploadRecording(userId, audioFile) {\n    const formData = new FormData();\n    formData.append('file', audioFile);\n    return this.request(`/api/upload/audio/${userId}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': AUTH_HEADER\n      },\n      body: formData\n    });\n  }\n}\nconst apiService = new ApiService();\nexport default apiService;\nexport const {\n  getDashboardData,\n  getDashboardStats,\n  getUsers,\n  startListening,\n  stopListening,\n  getActiveSessions,\n  getRecentRecordings,\n  getLatestAudio,\n  getHourlyActivity,\n  getHealth,\n  uploadRecording\n} = apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AUTH_HEADER","btoa","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","response","fetch","ok","Error","status","statusText","json","error","console","getDashboardData","flaskData","getFallbackData","transformFlaskData","active_sessions_count","total_users","connection_status","users","active_sessions","stats","total_recordings","online_users","last_updated","Date","toISOString","startListening","userId","message","session_id","now","user_id","location","lat","lng","source","stopListening","duration_minutes","getLatestAudio","deviceUploads","filter","u","device_id","length","latest","audio_url","audio_file","duration","recorded_at","timestamp","file_size","getUsers","dashboardData","getActiveSessions","getDashboardStats","getRecentRecordings","limit","recordings","slice","map","upload","index","id","filename","created_at","total","getHealth","version","getHourlyActivity","hours","activity","currentHour","getHours","i","hour","push","toString","padStart","Math","floor","random","labels","data","total_today","reduce","a","b","peak_hour","indexOf","max","uploadRecording","audioFile","formData","FormData","append","method","body","apiService"],"sources":["/home/opt/BUAS-Dashboard/frontend/src/services/api.js"],"sourcesContent":["// api.js - Updated for Flask server with /api routes\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://143.244.133.125:5000'; // Flask server on port 5000\n\nconst AUTH_HEADER = 'Basic ' + btoa('admin:supersecret');\n\nclass ApiService {\n  constructor(baseURL = API_BASE_URL) {\n    this.baseURL = baseURL;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': AUTH_HEADER,\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} - ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  async getDashboardData() {\n    try {\n      const flaskData = await this.request('/api/dashboard-data');\n      // Flask server returns data in the correct format already\n      return flaskData;\n    } catch (error) {\n      console.error('Dashboard data fetch failed:', error);\n      return this.getFallbackData();\n    }\n  }\n\n  // Keep this method for fallback scenarios\n  transformFlaskData(flaskData) {\n    // This method is no longer needed as Flask returns the correct format\n    // But keeping it for compatibility\n    return flaskData;\n  }\n\n  getFallbackData() {\n    return {\n      active_sessions_count: 0,\n      total_users: 0,\n      connection_status: \"disconnected\",\n      users: [],\n      active_sessions: [],\n      stats: {\n        total_users: 0,\n        active_sessions: 0,\n        total_recordings: 0,\n        online_users: 0\n      },\n      last_updated: new Date().toISOString()\n    };\n  }\n\n  async startListening(userId) {\n    return {\n      status: \"success\",\n      message: `Started monitoring device ${userId}`,\n      session_id: `mock_${userId}_${Date.now()}`,\n      user_id: userId,\n      location: { lat: 6.5244, lng: 3.3792, source: \"mock\" }\n    };\n  }\n\n  async stopListening(userId) {\n    return {\n      status: \"success\",\n      message: `Stopped monitoring device ${userId}`,\n      session_id: `mock_${userId}_${Date.now()}`,\n      duration_minutes: 0\n    };\n  }\n\n  async getLatestAudio(userId) {\n    try {\n      const flaskData = await this.request('/api/dashboard-data');\n      const deviceUploads = flaskData.filter(u => u.device_id === userId);\n\n      if (deviceUploads.length > 0) {\n        const latest = deviceUploads[0];\n        return {\n          user_id: userId,\n          audio_url: `${this.baseURL}/api/uploads/${latest.audio_file}`,\n          duration: 0,\n          recorded_at: latest.timestamp,\n          file_size: 0\n        };\n      } else {\n        throw new Error(\"No audio found\");\n      }\n    } catch (error) {\n      throw new Error(\"No audio found for this device\");\n    }\n  }\n\n  async getUsers() {\n    const dashboardData = await this.getDashboardData();\n    return { users: dashboardData.users };\n  }\n\n  async getActiveSessions() {\n    return { active_sessions: [] };\n  }\n\n  async getDashboardStats() {\n    const dashboardData = await this.getDashboardData();\n    return dashboardData.stats;\n  }\n\n  async getRecentRecordings(limit = 10) {\n    try {\n      const flaskData = await this.request('/api/dashboard-data');\n      const recordings = flaskData.slice(0, limit).map((upload, index) => ({\n        id: `rec_${upload.device_id}_${index}`,\n        user_id: upload.device_id,\n        filename: upload.audio_file,\n        duration: 0,\n        created_at: upload.timestamp,\n        file_size: 0\n      }));\n      return { recordings, total: recordings.length, limit };\n    } catch (error) {\n      return { recordings: [], total: 0, limit };\n    }\n  }\n\n  async getHealth() {\n    try {\n      await this.request('/api/health');\n      return {\n        status: \"healthy\",\n        timestamp: new Date().toISOString(),\n        version: \"1.0.0\"\n      };\n    } catch (error) {\n      return {\n        status: \"unhealthy\",\n        timestamp: new Date().toISOString(),\n        error: error.message\n      };\n    }\n  }\n\n  async getHourlyActivity() {\n    const hours = [];\n    const activity = [];\n    const currentHour = new Date().getHours();\n\n    for (let i = 0; i < 24; i++) {\n      const hour = (currentHour - 23 + i) % 24;\n      hours.push(`${hour.toString().padStart(2, '0')}:00`);\n      activity.push(Math.floor(Math.random() * 10) + 1);\n    }\n\n    return {\n      labels: hours,\n      data: activity,\n      total_today: activity.reduce((a, b) => a + b, 0),\n      peak_hour: hours[activity.indexOf(Math.max(...activity))],\n      last_updated: new Date().toISOString()\n    };\n  }\n\n  async uploadRecording(userId, audioFile) {\n    const formData = new FormData();\n    formData.append('file', audioFile);\n\n    return this.request(`/api/upload/audio/${userId}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': AUTH_HEADER\n      },\n      body: formData\n    });\n  }\n}\n\nconst apiService = new ApiService();\n\nexport default apiService;\n\nexport const {\n  getDashboardData,\n  getDashboardStats,\n  getUsers,\n  startListening,\n  stopListening,\n  getActiveSessions,\n  getRecentRecordings,\n  getLatestAudio,\n  getHourlyActivity,\n  getHealth,\n  uploadRecording,\n} = apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}